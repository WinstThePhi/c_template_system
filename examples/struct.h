TOKEN_TEMPLATE_START: @template_start
TOKEN_TEMPLATE_NAME: Vec4
TOKEN_FEED_SYMBOL: <-
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: struct
TOKEN_IDENTIFIER: Vec4
TOKEN_BRACKET_OPEN: {
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: x
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: y
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: z
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: w
TOKEN_IDENTIFIER: Vec4
TOKEN_PARENTHETICAL_OPEN: (
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: x,
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: y,
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: z,
TOKEN_TEMPLATE_TYPE_NAME: T
TOKEN_IDENTIFIER: w
TOKEN_PARENTHETICAL_CLOSE: )
TOKEN_IDENTIFIER: :
TOKEN_IDENTIFIER: x
TOKEN_PARENTHETICAL_OPEN: (
TOKEN_IDENTIFIER: x
TOKEN_PARENTHETICAL_CLOSE: )
TOKEN_IDENTIFIER: ,
TOKEN_IDENTIFIER: y
TOKEN_PARENTHETICAL_OPEN: (
TOKEN_IDENTIFIER: y
TOKEN_PARENTHETICAL_CLOSE: )
TOKEN_IDENTIFIER: ,
TOKEN_IDENTIFIER: z
TOKEN_PARENTHETICAL_OPEN: (
TOKEN_IDENTIFIER: z
TOKEN_PARENTHETICAL_CLOSE: )
TOKEN_IDENTIFIER: ,
TOKEN_IDENTIFIER: w
TOKEN_PARENTHETICAL_OPEN: (
TOKEN_IDENTIFIER: w
TOKEN_PARENTHETICAL_CLOSE: )
TOKEN_BRACKET_OPEN: {
TOKEN_BRACKET_CLOSE: }
TOKEN_IDENTIFIER: void
TOKEN_IDENTIFIER: normalize
TOKEN_PARENTHETICAL_OPEN: (
TOKEN_PARENTHETICAL_CLOSE: )
TOKEN_IDENTIFIER: f32
TOKEN_IDENTIFIER: get_length
TOKEN_PARENTHETICAL_OPEN: (
TOKEN_PARENTHETICAL_CLOSE: )
TOKEN_BRACKET_CLOSE: }
TOKEN_TEMPLATE_END: @template_end
TOKEN_TEMPLATE: @template
TOKEN_IDENTIFIER: Vec4
TOKEN_TEMPLATE_TYPE_INDICATOR: ->
TOKEN_TEMPLATE_TYPE: f32
TOKEN_TEMPLATE: @template
TOKEN_IDENTIFIER: Vec4
TOKEN_TEMPLATE_TYPE_INDICATOR: ->
TOKEN_TEMPLATE_TYPE: u8
TOKEN_END_OF_FILE: 
